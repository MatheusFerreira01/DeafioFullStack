@using Newtonsoft.Json
@model DeviceCommunicationPageModel
@{
    ViewBag.Title = "DeviceCommunication";
}

<h2>Monitoramento</h2>
<div class="monitor-container">
    <div class="col-md-6">
        <textarea class="form-control" rows="10" readonly>@Model.ResultCommandSender</textarea>
    </div>
    <div class="form-control-select">
        <form asp-controller="Device" asp-action="SubmitCommand" method="post">
            @for (int i = 0; i < Model.SelectedDevices.Count; i++)
            {
                var device = Model.SelectedDevices[i];
                <input type="hidden" name="SelectedDevices[@i].Identifier" value="@device.Identifier" />
                <input type="hidden" name="SelectedDevices[@i].Description" value="@device.Description" />
                <input type="hidden" name="SelectedDevices[@i].Manufacturer" value="@device.Manufacturer" />
                <input type="hidden" name="SelectedDevices[@i].RainVolume" value="@device.RainVolume" />
                <input type="hidden" name="SelectedDevices[@i].Url" value="@device.Url" />
            }
            @for (int i = 0; i < Model.CommandsList.Count; i++)
            {
                var command = Model.CommandsList[i];
                <input type="hidden" name="CommandsList[@i].Operation" value="@command.Operation" />
                <input type="hidden" name="CommandsList[@i].Description" value="@command.Description" />
                <input type="hidden" name="CommandsList[@i].Format" value="@command.Format" />
                <input type="hidden" name="CommandsList[@i].Result" value="@command.Result" />
                <input type="hidden" name="CommandsList[@i].Tittle" value="@command.Tittle" />
            }
            <select class="form-control" name="SelectedCommand">
                <option value="">Selecione um Comando</option>
                @foreach (var device in Model.CommandsList)
                {
                    <option value="@device.Operation">@device.Tittle</option>
                }
            </select>
            <input type="hidden" name="RefererLastPage" value="@Model.RefererLastPage" />
            <button type="submit" class="btn btn-primary mt-3">Enviar</button>
            <a class="btn btn-primary mt-3" href="@Url.Action("BackScreen", "Device", Model)">Voltar</a>
        </form>
    </div>
    <div class="dash-layout">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="realTimeToggle">
            <label class="form-check-label" for="realTimeToggle">Tempo Real</label>
            <label id="loadingMessage" hidden> ...Carregando</label>
        </div>
        <div class="form-chart">
            <canvas id="myChart"></canvas>
        </div>
    </div>
</div>





@section Scripts {
    <script>

        var intervalId;
        var myChart;
        var loadingMessage = document.getElementById('loadingMessage');

        var ctx = document.getElementById('myChart').getContext('2d');

        document.getElementById('realTimeToggle').addEventListener('change', function () {

            handleRealTimeToggle(this.checked);

            if (this.checked) {
                loadingMessage.hidden = false;
                sendSolicitation();
                intervalId = setInterval(sendSolicitation, 1500);

            } else {
                clearInterval(intervalId);
                loadingMessage.hidden = true;

            }
        });

        function sendSolicitation() {

            var pageObject = @Html.Raw(JsonConvert.SerializeObject(Model));

            var pageJson = JSON.stringify(pageObject);
            var pageModel = pageJson;

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Device/RealTimeData', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    var response = JSON.parse(xhr.responseText);
                    if (response.success) {
                        updateChart(response.chartLabelsSerialized);
                    } else {
                        console.error('Erro na resposta do servidor:', response.message);
                    }
                } else {
                    console.error('Erro ao processar a solicitação:', xhr.statusText);
                }
            };

            xhr.onerror = function () {
                console.error('Erro na solicitação.');
            };

            xhr.send(JSON.stringify(pageModel));
        }

        function updateChart(pageModel) {
            var deviceDataList = JSON.parse(pageModel);
            var labels = [];
            var data = [];
            var backgroundColors = [];

            for (var i = 0; i < deviceDataList.length; i++) {

                labels.push(deviceDataList[i].DeviceName);
                data.push(deviceDataList[i].Data);
                backgroundColors.push(deviceDataList[i].Color);
            }

            if (!myChart) {
                myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Volume da Chuva',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                });
            }
            else {
                myChart.data.labels = labels;
                myChart.data.datasets[0].data = data;
                myChart.data.datasets[0].backgroundColor = backgroundColors;
                myChart.update();
            }
        }

        function handleRealTimeToggle(isChecked) {
            var enviarButton = document.querySelector('button[type="submit"]');
            var resultTextArea = document.querySelector('textarea.form-control');

            if (isChecked) {
                enviarButton.disabled = true;
                resultTextArea.value = "Dados sendo gerados automaticamente...";
            }
            else {
                enviarButton.disabled = false;
            }
        }

        var deviceDataList = @Html.Raw(Model.ChartLabelsSerialized);

        if (deviceDataList != null) {

            var labels = [];
            var data = [];
            var backgroundColors = [];
            for (var i = 0; i < deviceDataList.length; i++) {
                labels.push(deviceDataList[i].DeviceName);
                data.push(deviceDataList[i].Data);
                backgroundColors.push(deviceDataList[i].Color);
            }

            if (!myChart) {
                myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Volume da Chuva',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                });
            }
            else {
                myChart.data.labels = labels;
                myChart.data.datasets[0].data = data;
                myChart.update();
            }
        }

    </script>
}